
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
		// Заполнение шапки
		АвторДокумента = ДанныеЗаполнения.АвторДокумента;
		ДатаЗаписи = ДанныеЗаполнения.ДатаЗаписи;
		Клиент = ДанныеЗаполнения.Клиент;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.Услуга = ТекСтрокаУслуги.Услуга;
			НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
		КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; 
	ЭлементБлокировки.ИсточникДанных = Товар; 
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Товар"); 
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад); 
	Блокировка.Заблокировать();

	Движения.Продажи.Записывать = Истина;
	Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.УчётЗатрат.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	
	Движения.Продажи.Записать();
	Движения.ТоварыНаСкладах.Записать();
	Движения.УчётЗатрат.Записать();
	Движения.Хозрасчетный.Записать();
		
	Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;	 
	Движения.УчётЗатрат.Записывать = Истина;
	Движения.Хозрасчетный.Записывать = Истина;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Движения.ЗаказыКлиентов.Записывать = Истина;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровИУслугТовар.Товар КАК Номенклатура,
	               |	СУММА(РеализацияТоваровИУслугТовар.Количество) КАК Количество,
	               |	СУММА(РеализацияТоваровИУслугТовар.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТ_ТоварыИУслуги
	               |ИЗ
	               |	Документ.РеализацияТоваровИУслуг.Товар КАК РеализацияТоваровИУслугТовар
	               |ГДЕ
	               |	РеализацияТоваровИУслугТовар.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровИУслугТовар.Товар
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровИУслугУслуги.Услуга,
	               |	СУММА(РеализацияТоваровИУслугУслуги.Количество),
	               |	СУММА(РеализацияТоваровИУслугУслуги.Сумма)
	               |ИЗ
	               |	Документ.РеализацияТоваровИУслуг.Услуги КАК РеализацияТоваровИУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровИУслугУслуги.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровИУслугУслуги.Услуга
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТоварыИУслуги.Номенклатура КАК Номенклатура,
	               |	ВТ_ТоварыИУслуги.Номенклатура.Представление КАК НоменклатураПредставление,
	               |	ВТ_ТоварыИУслуги.Номенклатура.СтатьяЗатрат КАК НоменклатураСтатьяЗатрат,
	               |	ВТ_ТоварыИУслуги.Количество КАК КоличествоВДокументе,
	               |	ВТ_ТоварыИУслуги.Сумма КАК СуммаВДокументе,
	               |	ВЫБОР
	               |		КОГДА ВТ_ТоварыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоТовар,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ТоварыНаСкладахОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ТоварыНаСкладахОстатки.СрокГодности КАК СрокГодности,
	               |	ВТ_ТоварыИУслуги.Номенклатура.СчетБухгалтерскогоУчета КАК СчетБухгалтерскогоУчета
	               |ИЗ
	               |	ВТ_ТоварыИУслуги КАК ВТ_ТоварыИУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				&МоментВремени,
	               |				Склад = &Склад
	               |					И Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ВТ_ТоварыИУслуги.Номенклатура
	               |						ИЗ
	               |							ВТ_ТоварыИУслуги КАК ВТ_ТоварыИУслуги)) КАК ТоварыНаСкладахОстатки
	               |		ПО ВТ_ТоварыИУслуги.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СрокГодности
	               |ИТОГИ
	               |	МАКСИМУМ(КоличествоВДокументе),
	               |	МАКСИМУМ(СуммаВДокументе),
	               |	СУММА(КоличествоОстаток)
	               |ПО
	               |	Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Если ВыборкаНоменклатура.ЭтоТовар Тогда
			СуммаСписания = 0;
			Превышение = ВыборкаНоменклатура.КоличествоВДокументе - ВыборкаНоменклатура.КоличествоОстаток;
			
			Если Превышение > 0 Тогда
				Если Константы.ЗапретОтрицательныхОстатков.Получить() = Истина Тогда
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("Проведение невозможно, на складе %1 отсутствует необходимое количество номенклатуры %2", Склад, ВыборкаНоменклатура.НоменклатураПредставление);
					Сообщение.Сообщить();
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("Превышение остатка по номенклатуре ""%1"" в количестве ""%2""", ВыборкаНоменклатура.НоменклатураПредставление, Превышение);
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ОсталосьСписать = ВыборкаНоменклатура.КоличествоВДокументе;
			ВыборкаДетальная = ВыборкаНоменклатура.Выбрать();

		
			Пока ВыборкаДетальная.Следующий() Цикл
				Списываем = Мин(ВыборкаДетальная.КоличествоОстаток, ОсталосьСписать);
				
				Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
				Движение.Период = Дата;
				Движение.Номенклатура = ВыборкаДетальная.Номенклатура;
				Движение.СрокГодности = ВыборкаДетальная.СрокГодности;
				Движение.Количество = Списываем;
				Движение.Склад = Склад;
				
				ОсталосьСписать = ОсталосьСписать - Списываем;
				Движение.Сумма = ?(ВыборкаДетальная.КоличествоВДокументе = Списываем,
				ВыборкаДетальная.СуммаВДокументе,
				Списываем / ВыборкаДетальная.КоличествоОстаток * ВыборкаДетальная.СуммаОстаток);
				СуммаСписания = СуммаСписания + Движение.Сумма;
				
				//Проводка по списанию товаров и материалов Дт90 Кт10/41
				Движение = Движения.Хозрасчетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Хозрасчетный.Продажи;
				Движение.СчетКт = ВыборкаНоменклатура.СчетБухгалтерскогоУчета;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = ВыборкаДетальная.Номенклатура; 
				Движение.Период = Дата;    
				Движение.Сумма = СуммаСписания;
				Движение.Содержание = "Списана себестоимость товарно-материальных ценностей";

				Если ОсталосьСписать = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
				//УчётЗатрат
				Движение = Движения.УчётЗатрат.Добавить();
				Движение.Период = Дата;
				Движение.СтатьяЗатрат = ВыборкаНоменклатура.НоменклатураСтатьяЗатрат;
				Движение.Сумма = СуммаСписания;
		Иначе
			//ЗаказыКлиентовУслуги
			Движение = Движения.ЗаказыКлиентов.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Дата = ДатаЗаписи;
			Движение.ЗаказКлиента = ДокументОснование;
			Движение.Клиент = Клиент;
			Движение.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			Движение.Сумма = ВыборкаНоменклатура.СуммаВДокументе;
		КонецЕсли;	
		//ПродажиТовары
		Движение = Движения.Продажи.Добавить();
		Движение.Период = Дата;
		Движение.Товар = ВыборкаНоменклатура.Номенклатура;
		Движение.Клиент = Клиент;
		Движение.Сотрудник = Сотрудник;
		Движение.Количество = ВыборкаНоменклатура.КоличествоВДокументе;
		Движение.Сумма = ВыборкаНоменклатура.СуммаВДокументе;
	КонецЦикла;
	//Проводка по отражению выручки Дт62 Кт90
	Движение = Движения.Хозрасчетный.Добавить();
	Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Движение.СчетКт = ПланыСчетов.Хозрасчетный.Продажи;
	БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, Клиент);
	Движение.Период = Дата;
	Движение.Сумма = Сумма;
	Движение.Содержание = "Отражена выручка от реализации товаров и услуг";
		//Проверить корректность остатков
		Запрос = Новый Запрос;
		Движения.ЗаказыКлиентов.БлокироватьДляИзменения = Истина;
		Движения.ЗаказыКлиентов.Записать();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
		               |	ЗаказыКлиентовОстатки.Клиент КАК Клиент,
		               |	ЗаказыКлиентовОстатки.Дата КАК Дата,
		               |	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		               |	ЗаказыКлиентовОстатки.СуммаОстаток КАК СуммаОстаток,
		               |	ЗаказыКлиентовОстатки.Номенклатура.Представление КАК НоменклатураПредставление,
		               |	ЗаказыКлиентовОстатки.Клиент.Представление КАК КлиентПредставление
		               |ИЗ
		               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
		               |			&МоментВремени,
		               |			Клиент = &Клиент
		               |				И Дата = &Дата
		               |				И ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки
		               |ГДЕ
		               |	ЗаказыКлиентовОстатки.СуммаОстаток < 0";
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Дата", ДатаЗаписи);
		Запрос.УстановитьПараметр("ЗаказКлиента", ДокументОснование); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Отказ = Истина;
		    Выборка = Результат.Выбрать();
		    Пока Выборка.Следующий() Цикл
		        Сообщение = Новый СообщениеПользователю;
		        Сообщение.Текст = СтрШаблон("Услуга ""%1"" для клиента ""%2""  на дату ""%3"" уже была обработана или не была найдена такая запись!", Выборка.НоменклатураПредставление, Выборка.КлиентПредставление, Формат(Выборка.Дата, "ДФ=dd.MM.yy"));
		        Сообщение.Сообщить();
		    КонецЦикла;
		КонецЕсли;			
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(АвторДокумента) Тогда
		АвторДокумента = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	Сумма = Товар.Итог("Сумма") + Услуги.Итог("Сумма");
	Если ЗначениеЗаполнено(Ссылка) 
		И ПризнакОплаты <> Перечисления.ОплатаДокумента.ПолностьюОплачен Тогда
		СтруктураОплаты = Документы.РеализацияТоваровИУслуг.ПолучитьОплатуДокумента(Ссылка);
		ПризнакОплаты = СтруктураОплаты.ПризнакОплаты;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаблокироватьДанныеДляРедактирования(ДокументОснование);
		Объект = ДокументОснование.ПолучитьОбъект();
		Объект.УслугаОказана = Истина;
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(ДокументОснование);
	КонецЕсли;
КонецПроцедуры

